@inproceedings{marlow2001async,
    author = {Marlow, Simon and Jones, Simon Peyton and Moran, Andrew and
        Reppy, John},
    title = {Asynchronous Exceptions in Haskell},
    year = {2001},
    isbn = {1581134142},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/378795.378858},
    doi = {10.1145/378795.378858},
    abstract = {Asynchronous exceptions, such as timeouts are important for
        robust, modular programs, but are extremely difficult to program with —
            so much so that most programming languages either heavily restrict
            them or ban them altogether. We extend our earlier work, in which
            we added synchronous exceptions to Haskell, to support asynchronous
            exceptions too. Our design introduces scoped combinators for
            blocking and unblocking asynchronous interrupts, along with a
            somewhat surprising semantics for operations that can suspend.
            Uniquely, we also give a formal semantics for our system.},
    booktitle = {Proceedings of the ACM SIGPLAN 2001 Conference on Programming
        Language Design and Implementation},
    pages = {274–285},
    numpages = {12},
    location = {Snowbird, Utah, USA},
    series = {PLDI '01}
}

@inproceedings{marlow2006extensible,
    author = {Marlow, Simon},
    title = {An Extensible Dynamically-Typed Hierarchy of Exceptions},
    year = {2006},
    isbn = {1595934898},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1159842.1159854},
    doi = {10.1145/1159842.1159854},
    abstract = {In this paper we address the lack of extensibility of the
        exception type in Haskell. We propose a lightweight solution involving
            the use of existential types and the Typeable class only, and show
            how our solution allows a fully extensible hierarchy of exception
            types to be declared, in which a single overloaded catch operator
            can be used to catch either specific exception types, or exceptions
            belonging to any subclass in the hierarchy. We also show how to
            combine the existing object-oriented framework OOHaskell with our
            design, such that OOHaskell objects can be thrown and caught as
            exceptions, with full support for implicit OOHaskell subtyping in
            the catch operator.},
    booktitle = {Proceedings of the 2006 ACM SIGPLAN Workshop on Haskell},
    pages = {96–106},
    numpages = {11},
    keywords = {Haskell, exceptions},
    location = {Portland, Oregon, USA},
    series = {Haskell '06}
}

@inproceedings{hewitt1973actors,
    author = {Hewitt, Carl and Bishop, Peter and Steiger, Richard},
    title = {A Universal Modular ACTOR Formalism for Artificial Intelligence},
    year = {1973},
    publisher = {Morgan Kaufmann Publishers Inc.},
    address = {San Francisco, CA, USA},
    abstract = {This paper proposes a modular ACTOR architecture and
        definitional method for artificial intelligence that is conceptually
            based on a single kind of object: actors [or, if you will, virtual
            processors, activation frames, or streams]. The formalism makes no
            presuppositions about the representation of primitive data
            structures and control structures. Such structures can be
            programmed, micro-coded, or hard wired in a uniform modular
            fashion. In fact it is impossible to determine whether a given
            object is "really" represented as a list, a vector, a hash table, a
            function, or a process. The architecture will efficiently run the
            coming generation of PLANNER-like artificial intelligence languages
            including those requiring a high degree of parallelism. The
            efficiency is gained without loss of programming generality because
            it only makes certain actors more efficient; it does not change
            their behavioral characteristics. The architecture is general with
            respect to control structure and does not have or need goto,
        interrupt, or semaphore primitives. The formalism achieves the goals
            that the disallowed constructs are intended to achieve by other
            more structured methods.},
    booktitle = {Proceedings of the 3rd International Joint Conference on
        Artificial Intelligence},
    pages = {235–245},
    numpages = {11},
    location = {Stanford, USA},
    series = {IJCAI'73}
}

@misc{controlDotException,
    author = {libraries@haskell.org},
    year = {2021},
    title = {Control.Exception haddock documentation},
    booktitle = {hackage.haskell.org},
    url = {https://hackage.haskell.org/package/base-4.15.1.0/docs/Control-Exception.html#v:throwTo}
}

@inproceedings{lelann1977distributed,
    title={Distributed Systems -- Towards a Formal Approach},
    author={Le Lann, G{\'e}rard},
    booktitle={IFIP Congress Proceedings},
    volume={7},
    pages={155--160},
    year={1977},
    url={https://www.rocq.inria.fr/novaltis/publications/IFIP%20Congress%201977.pdf}
}

@article{chang1979decentralextrema,
    author = {Chang, Ernest and Roberts, Rosemary},
    title = {An Improved Algorithm for Decentralized Extrema-Finding in
        Circular Configurations of Processes},
    year = {1979},
    issue_date = {May 1979},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {22},
    number = {5},
    issn = {0001-0782},
    url = {https://doi.org/10.1145/359104.359108},
    doi = {10.1145/359104.359108},
    abstract = {This note presents an improvement to LeLann's algorithm for
        finding the largest (or smallest) of a set of uniquely numbered
            processes arranged in a circle, in which no central controller
            exists and the number of processes is not known a priori. This
            decentralized algorithm uses a technique of selective message
            extinction in order to achieve an average number of message passes
            of order (n log n) rather than O(n2).},
    journal = {Commun. ACM},
    month = {May},
    pages = {281–283},
    numpages = {3},
    keywords = {operating systems, decentralized algorithms, distributed
        systems}
}

@phdthesis{armstrong2003,
	edition={3},
	series={SICS dissertation series},
	title={Making reliable distributed systems in the presence of software errors},
	url={http://urn.kb.se/resolve?urn=urn:nbn:se:ri:diva-22455},
	author={Armstrong, Joe},
	year={2003},
	collection={SICS dissertation series}
}

@misc{sussman1975interpreter,
    title = {SCHEME: An Interpreter for Extended Lambda Calculus},
    author = {Sussman, Gerald J. and Steele, Guy L., Jr.},
    month = {December},
    year = {1975},
    issue_date = {22 December 1975},
    numpages = {48},
    series = {AIM-349},
    url = {https://dspace.mit.edu/handle/1721.1/5794}
}
