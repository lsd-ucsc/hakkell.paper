%% Commands for TeXCount
%TC:macro \cite [option:text,text]
%TC:macro \citep [option:text,text]
%TC:macro \citet [option:text,text]
%TC:envir table 0 1
%TC:envir table* 0 1
%TC:envir tabular [ignore] word
%TC:envir displaymath 0 word
%TC:envir math 0 word
%TC:envir comment 0 0


%% For submission and review of your manuscript please change the
%% command to \documentclass[manuscript, screen, review]{acmart}.
%% When submitting camera ready or to TAPS, please change the command
%% to \documentclass[sigconf]{acmart} or whichever template is required
%% for your publication.
\documentclass[sigplan,screen,review,anonymous]{acmart}

%%%% lhs2Tex (*.lhs) document
\let\Bbbk\undefined
%include polycode.fmt

%%%% %% Rights management information.  This information is sent to you
%%%% %% when you complete the rights form.  These commands have SAMPLE
%%%% %% values in them; it is your responsibility as an author to replace
%%%% %% the commands and values with those provided to you when you
%%%% %% complete the rights form.
%%%% \setcopyright{acmcopyright}
%%%% \copyrightyear{2018}
%%%% \acmYear{2018}
%%%% \acmDOI{XXXXXXX.XXXXXXX}

%%%% %% Submission ID.
%%%% %% Use this when submitting an article to a sponsored event. You'll
%%%% %% receive a unique submission ID from the organizers
%%%% %% of the event, and this ID should be used as the parameter to this command.
%%%% \acmSubmissionID{123-A56-BU3}

%% The majority of ACM publications use numbered citations and
%% references.  The command \citestyle{authoryear} switches to the
%% "author year" style.
%% If you are preparing content for an event
%% sponsored by ACM SIGGRAPH, you must use the "author year" style of
%% citations and references.
%% Uncommenting the next command will enable that style.
\citestyle{acmauthoryear}

\usepackage{listings}
% https://tex.stackexchange.com/questions/116595/highlighting-haskell-listings-in-large-tex-document
\lstset{
    frame=none,
    xleftmargin=2pt,
    stepnumber=1,
    numbers=left,
    numbersep=5pt,
    numberstyle=\ttfamily\tiny\color[gray]{0.3},
    belowcaptionskip=\bigskipamount,
    captionpos=b,
    escapeinside={*'}{'*},
    language=haskell,
    tabsize=2,
    emphstyle={\bf},
    commentstyle=\it,
    stringstyle=\mdseries\rmfamily,
    showspaces=false,
    keywordstyle=\bfseries\rmfamily,
    columns=flexible,
    basicstyle=\small\sffamily,
    showstringspaces=false,
    morecomment=[l]\%,
}

%% end of the preamble, start of the body of the document source.
\begin{document}


%% The "title" command has an optional parameter,
%% allowing the author to define a "short title" to be used in page headers.
\title{An Exceptional Actor System (Functional Pearl)}

%% The "author" command and its associated commands are used to define
%% the authors and their affiliations.
%% Of note is the shared affiliation of the first two authors, and the
%% "authornote" and "authornotemark" commands
%% used to denote shared contribution to the research.
\author{Patrick Redmond}
\orcid{0000-0001-5702-0860}
\author{Lindsey Kuper}
\affiliation{
  \institution{University of California, Santa Cruz}
  \country{USA}
}

%%%% %% By default, the full list of authors will be used in the page
%%%% %% headers. Often, this list is too long, and will overlap
%%%% %% other information printed in the page headers. This command allows
%%%% %% the author to define a more concise list
%%%% %% of authors' names for this purpose.
%%%% \renewcommand{\shortauthors}{Trovato et al.}

%% The abstract is a short summary of the work to be presented in the
%% article.
\begin{abstract}
    The Glasgow Haskell Compiler is well known for its fully featured runtime
    system (RTS) which includes green threads, asynchronous exceptions, and
    recently delimited continuations.
    We present a user accessible actor framework hidden in plain sight within
    the RTS, demonstrate its use on classic examples, and raise questions about
    the expressiveness and subsumption of programming language features.
\end{abstract}

%%%% %%
%%%% %% The code below is generated by the tool at http://dl.acm.org/ccs.cfm.
%%%% %% Please copy and paste the code instead of the example below.
%%%% %%
%%%% \begin{CCSXML}
%%%% <ccs2012>
%%%%  <concept>
%%%%   <concept_id>10010520.10010553.10010562</concept_id>
%%%%   <concept_desc>Computer systems organization~Embedded systems</concept_desc>
%%%%   <concept_significance>500</concept_significance>
%%%%  </concept>
%%%%  <concept>
%%%%   <concept_id>10010520.10010575.10010755</concept_id>
%%%%   <concept_desc>Computer systems organization~Redundancy</concept_desc>
%%%%   <concept_significance>300</concept_significance>
%%%%  </concept>
%%%%  <concept>
%%%%   <concept_id>10010520.10010553.10010554</concept_id>
%%%%   <concept_desc>Computer systems organization~Robotics</concept_desc>
%%%%   <concept_significance>100</concept_significance>
%%%%  </concept>
%%%%  <concept>
%%%%   <concept_id>10003033.10003083.10003095</concept_id>
%%%%   <concept_desc>Networks~Network reliability</concept_desc>
%%%%   <concept_significance>100</concept_significance>
%%%%  </concept>
%%%% </ccs2012>
%%%% \end{CCSXML}
%%%% 
%%%% \ccsdesc[500]{Computer systems organization~Embedded systems}
%%%% \ccsdesc[300]{Computer systems organization~Redundancy}
%%%% \ccsdesc{Computer systems organization~Robotics}
%%%% \ccsdesc[100]{Networks~Network reliability}

%% Keywords. The author(s) should pick words that accurately describe
%% the work being presented. Separate the keywords with commas.
\keywords{
    actor framework,
    asynchronous exceptions,
    runtime system,
    programming languages
}

%%%% \received{20 February 2007}
%%%% \received[revised]{12 March 2009}
%%%% \received[accepted]{5 June 2009}

%% This command processes the author and affiliation and title
%% information and builds the first part of the formatted document.
\maketitle


\section{Introduction}

TODO

\section{Background}

\subsection{Exceptions in GHC}

The Glasgow Haskell Compiler (GHC) supports three varieties of exceptions, all
of which may be caught in the IO monad and otherwise cause the program to
terminate.
%
\emph{Imprecise exceptions} arise in pure code from expressions such as
\verb|(div 1 0)| which cannot be reduced further.
%
\emph{Synchronous exceptions} are thrown when side effects in the IO monad
cannot proceed such as \verb|(readFile "\0")|.
%
\emph{Asynchronous exceptions} are thrown by threads distinct from the current
one, or the RTS itself, to communicate conditions requiring the thread to
terminate: thread cancellation, user interrupts, or memory limits.
%
We will focus on asynchronous exceptions.

Asynchronous exceptions uniquely allow syntactically-distant parts of a program
to interact.
%
A thread needs only the \verb|ThreadId| of another
to throw a \verb|ThreadKilled| exception to it.
The standard library function \verb|killThread|
is even implemented as \verb|(\x -> throwTo x ThreadKilled)|.\footnote{
    These identifiers are variously defined in \texttt{Control.Concurrent} and
    \texttt{Control.Exception} in \texttt{base-4.18.0.0}.
}
%
There is no permission or capability required to access this powerful feature.

Asynchronous exceptions are peculiar because they aren't constrained to their
stated purpose, \cite{marlow2001async} of ``signaling (or killing) one
thread by another.''
%
A thread may throw any exception to any thread for any reason.
%
Standard exceptions may be reused to extend greetings,
\verb|(\x -> throwTo x $ AssertionFailed "hello")|.
%
User defined datatypes may be made into exceptions.
%
It is only necessary to declare an instance of \verb|Exception| for a type
\cite{marlow2006extensible}:
%
\begin{verbatim}
data Greet = Hi | Hello deriving Show
instance Exception Greet
\end{verbatim}
%
Having declared the instance it is permissible to greet in vernacular,
\verb|(\x -> throwTo x Hi)|.

Asynchronous exceptions may be caught by the receiving thread for
either cleanup or recovery.
%
Recovery includes ``inform[ing] the program when memory is running out [so] it
can take remedial action'' \cite{marlow2001async}.
%
The ability to recover from a termination signal seems innocuous, but combined
with the rest, asynchronous exceptions allow a variety of ``spooky action at a
distance'' which one might want to constrain in a functional programming
language.

\subsection{The actor model}

The actor model is a computational paradigm characterized by message passing.
%
\cite{hewitt1973actors} says, ``an actor can be thought of as a kind of virtual
processor that is never "busy" [in the sense that it cannot be sent a
message].''
%
In modern terms, we might say an actor is a green-thread with some state and an
inbox.
%
Upon receipt of a message to its inbox, an actor may perform some actions: send
a message, update state, create a new actor, destroy an actor, or terminate
itself.
%
Having completed that, the actor waits to process the next message in its
inbox.
%
We will approximate this model with Haskell's asynchronous exceptions as the
primary metaphor to message passing.




\section{Implementation}

We define that an actor is a Haskell thread running a library-provided
\verb|mainloop| function which mediates message receipt and calls to a
user-provided \verb|handler| function.
%
Here we describe the minimal abstractions around such threads which realize the
actor model.

\subsubsection{Sending (throwing) messages}

Test hello

\begin{code}
main :: IO ()
main = print "test"
\end{code}

\subsubsection{Receiving (catching) messages}


%% \subsection{One message type}
%% 
%% In the interest of clarity, we first describe the system in terms of a single
%% message type with \verb|handler| functions that do not maintain state.
%% %
%% Section \ref{sec:state} extends to a state-passing model and Section
%% \ref{sec:dynamic} enables the use of dynamic types.
%% 
%% \subsubsection{Sending (throwing) messages}
%% 
%% \subsubsection{Receiving (catching) messages}
%% 
%% \subsubsection{Maintaining state}
%% \label{sec:state}
%% 
%% 
%% \subsection{Dynamic message types}
%% \label{sec:dynamic}
%% 
%% To extend the sending and receiving messages to dynamic message types we
%% observe that a 



\section{Example}




\section{Big Questions}

TODO


\section{Conclusion}

TODO

%% The acknowledgments section is defined using the "acks" environment
%% (and NOT an unnumbered section). This ensures the proper
%% identification of the section in the article metadata, and the
%% consistent spelling of the heading.
\begin{acks}
To you, for reading this.
Ack the PLV people
\end{acks}

%% The next two lines define the bibliography style to be used, and
%% the bibliography file.
\bibliographystyle{ACM-Reference-Format}
\bibliography{main.bib}

%% If your work has an appendix, this is the place to put it.
\appendix

\section{Appendix}

TODO

\end{document}
\endinput
